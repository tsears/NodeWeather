{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Resources": {
    "WeatherApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "Weather API"
      }
    },
    "WeatherLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "dist/bundle.handler",
        "Runtime": "nodejs6.10",
        "CodeUri": "/Users/tsears/code/NodeWeather",
        "Environment": {
          "Variables" : {
            "GEOCODIO_API_KEY": "aaa",
            "DARKSKY_API_KEY": "bbb"
          }
        }
      }
    },    
    "LambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {"Fn::GetAtt": ["WeatherLambda", "Arn"]},
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {"Fn::Join": ["", 
          ["arn:aws:execute-api:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":", {"Ref": "WeatherApi"}, "/*"]
        ]}
      }
    },
    "WeatherApiStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {"Ref": "ApiDeployment"},
        "MethodSettings": [{
          "DataTraceEnabled": true,
          "HttpMethod": "GET",
          "LoggingLevel": "INFO",
          "ResourcePath": "/*"
        }],
        "RestApiId": {"Ref": "WeatherApi"},
        "StageName": "LATEST"
      }
    },
    "ApiGatewayCloudWatchLogsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": ["apigateway.amazonaws.com"] },
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [{
          "PolicyName": "ApiGatewayLogsPolicy",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
                "logs:GetLogEvents",
                "logs:FilterLogEvents"
              ],
              "Resource": "*"
            }]
          }
        }]
      }
    },
    "ApiGatewayAccount": {
      "Type" : "AWS::ApiGateway::Account",
      "Properties" : {
        "CloudWatchRoleArn" : {"Fn::GetAtt" : ["ApiGatewayCloudWatchLogsRole", "Arn"] }
      }
    },
    "ApiDeployment": {
      "DependsOn": ["WeatherRequest"],
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {"Ref": "WeatherApi"},
        "StageName": "DummyStage"
      }
    },
    "WeatherRequest": {
      "DependsOn": "LambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {"Fn::Join" : ["", 
            ["arn:aws:apigateway:", {"Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", {"Fn::GetAtt": ["WeatherLambda", "Arn"]}, "/invocations"]
          ]},
          "IntegrationResponses": [{
            "StatusCode": 200
          }],
          "RequestTemplates": {
            "application/json": {"Fn::Join" : ["", [
              "{",
                "\"query\": \"$input.params('query')\"",
              "}"
            ]]}
          }
        },
        "RequestParameters": {
          "method.request.querystring.query": false
        },
        "ResourceId": { "Fn::GetAtt": ["WeatherApi", "RootResourceId"] },
        "RestApiId": {"Ref": "WeatherApi"},
        "MethodResponses": [{
          "StatusCode": 200
        }]
      }
    }
  }
}